Account.cs
using System;
namespace ooplesson3task2
{
    public class Account
    {
        static int counter = 1;

        private int _number;

        public int Number
        {
            get
            {
                return _number;
            }
            set
            {
                if (value.GetType().ToString() == "System.Int32")
                {
                    _number = value;
                }
            }
        }
        decimal _balance;
        public decimal Balance
        {
            get
            {
                return _balance;
            }
            set
            {
                if (value.GetType().ToString() == "System.Decimal")
                {
                    _balance = value;
                }
            }
        }
        TypeOfBankAccount _typeAccount;

        public TypeOfBankAccount TypeAccount
        {
            get
            {
                return _typeAccount;
            }
            set
            {
                if (value.GetType().ToString() == "GB_04_02BankAccount04.TypeOfBankAccount")
                {
                    _typeAccount = value;
                }
            }
        }
        public Account()
        {
            _number = Increase();
        }

        public Account(decimal balance)
        {
            _balance = balance;
            _number = Increase();
        }
        public Account(TypeOfBankAccount typeAccount)
        {
            _typeAccount = typeAccount;
            _number = Increase();
        }

        public Account(decimal balance, TypeOfBankAccount typeAccount)
        {
            _balance = balance;
            _typeAccount = typeAccount;
            _number = Increase();
        }
        public void FullInfo()
        {
            Console.WriteLine($"Тип счёта: {_typeAccount}, Номер счёта: {_number}, Баланс: {_balance}");
        }
        public void DepositMoney(int number, decimal put)
        {
            if (number == _number)
            {
                _balance = _balance + put;
                Console.WriteLine($"Счёт пополнен на: {put}");
            }
        }

        public void WithdrawMoney(int number, decimal take)
        {
            if (number == _number)
            {
                if (_balance >= take)
                {
                    _balance = _balance - take;

                    Console.WriteLine($"Со счёта снята на: {take}");
                }
                else
                {
                    Console.WriteLine($"На счету недостаточно средств. Баланс: {_balance}; Сумма для снятия: {take};");
                }
            }
        }
        public void MoneyTransfer(Account moneyFrom, decimal take)
        {
            if (moneyFrom._balance > take)
            {
                _balance = _balance + take;
                moneyFrom._balance = moneyFrom._balance - take;
                Console.WriteLine($"На счёт: {_number}; Зачислена сумма {take}; Остаток: {_balance};");
                Console.WriteLine($"Со счёта: {moneyFrom._number}; Списана сумма: {take}; Остаток: {moneyFrom._balance};");
            }
            else
            {
                Console.WriteLine($"Недостаточно средств на счёте: {moneyFrom._number}, для списания суммы: {take}");
            }
        }
        private int Increase()
        {
            return counter++;
        }
    }
}
TypeOfBankAccount.cs
using System;
namespace ooplesson3task2
{
    public enum TypeOfBankAccount
    {
        Дебетовый,
        Кредитный,
        Депозитный,
        СчетЮрЛица,
    }
}
using System;
using System.Collections.Generic;

namespace ooplesson3task2
{
    class Program
    {
        static void Main(string[] args)
        {
            List<Account> listAccount = new ();

            Account account1 = new Account(1982, TypeOfBankAccount.Депозитный);
            Account account2 = new Account(276, TypeOfBankAccount.Дебетовый);
            Account account3 = new Account(3098, TypeOfBankAccount.Кредитный);
            Account account4 = new Account(12, TypeOfBankAccount.СчетЮрЛица);

            listAccount.Add(account1);
            listAccount.Add(account2);
            listAccount.Add(account3);
            listAccount.Add(account4);

            foreach (var item in listAccount)
            {
                item.FullInfo();
            }

            Console.WriteLine();

            string exit;
            do
            {
                Console.WriteLine("Для выхода нажмите Q + Enter. Для выбора текущего счёта нажмите номер счёта");

                exit = Console.ReadLine();
                exit = exit.ToLower();


                int _fromTheAccount = 1;
                bool _isAccountFound = true;
                bool _isTake = true;
                decimal _take = 0;



                switch (exit)
                {
                    case "1":

                        Console.WriteLine("Выбран текущий счёт № 1.");
                        do
                        {
                            Console.WriteLine("Выберете счёт с которого будут переведены деньги:");

                            try
                            {
                                _fromTheAccount = Convert.ToInt32(Console.ReadLine());
                                foreach (var item in listAccount)
                                {
                                    if (item.Number == _fromTheAccount)
                                    {
                                        _isAccountFound = false;
                                        break;
                                    }
                                }
                            }
                            catch (Exception)
                            {
                                Console.WriteLine("Не корректный номер счёта");
                            }

                        } while (_isAccountFound);


                        do
                        {
                            Console.WriteLine("Выберете сумму списания денег:");

                            try
                            {
                                _take = Convert.ToDecimal(Console.ReadLine());
                                _isTake = false;

                            }
                            catch (Exception)
                            {

                                Console.WriteLine("Некорректная сумма списания!");
                            }

                        } while (_isTake);


                        account1.MoneyTransfer(listAccount[_fromTheAccount - 1], _take);
                        break;


                    case "2":

                        Console.WriteLine("Выбран текущий счёт № 2.");
                        do
                        {
                            Console.WriteLine("Выберете счёт с которого будут переведены деньги:");

                            try
                            {
                                _fromTheAccount = Convert.ToInt32(Console.ReadLine());
                                foreach (var item in listAccount)
                                {
                                    if (item.Number == _fromTheAccount)
                                    {
                                        _isAccountFound = false;
                                        break;
                                    }
                                }
                            }
                            catch (Exception)
                            {
                                Console.WriteLine("Не корректный номер счёта");
                            }

                        } while (_isAccountFound);


                        do
                        {
                            Console.WriteLine("Выберете сумму списания денег:");

                            try
                            {
                                _take = Convert.ToDecimal(Console.ReadLine());
                                _isTake = false;

                            }
                            catch (Exception)
                            {

                                Console.WriteLine("Некорректная сумма списания!");

                            }

                        } while (_isTake);



                        account2.MoneyTransfer(listAccount[_fromTheAccount - 1], _take);
                        break;


                    case "3":

                        Console.WriteLine("Выбран текущий счёт № 3.");
                        do
                        {
                            Console.WriteLine("Выберете счёт с которого будут переведены деньги:");

                            try
                            {
                                _fromTheAccount = Convert.ToInt32(Console.ReadLine());
                                foreach (var item in listAccount)
                                {
                                    if (item.Number == _fromTheAccount)
                                    {
                                        _isAccountFound = false;
                                        break;
                                    }
                                }
                            }
                            catch (Exception)
                            {
                                Console.WriteLine("Не корректный номер счёта");
                            }

                        } while (_isAccountFound);


                        do
                        {
                            Console.WriteLine("Выберете сумму списания денег:");

                            try
                            {
                                _take = Convert.ToDecimal(Console.ReadLine());
                                _isTake = false;

                            }
                            catch (Exception)
                            {

                                Console.WriteLine("Некорректная сумма списания!");

                            }

                        } while (_isTake);


                        account3.MoneyTransfer(listAccount[_fromTheAccount - 1], _take);
                        break;


                    case "4":

                        Console.WriteLine("Выбран текущий счёт № 4.");
                        do
                        {
                            Console.WriteLine("Выберете счёт с которого будут переведены деньги:");

                            try
                            {
                                _fromTheAccount = Convert.ToInt32(Console.ReadLine());
                                foreach (var item in listAccount)
                                {
                                    if (item.Number == _fromTheAccount)
                                    {
                                        _isAccountFound = false;
                                        break;
                                    }
                                }
                            }
                            catch (Exception)
                            {
                                Console.WriteLine("Не корректный номер счёта");
                            }

                        } while (_isAccountFound);


                        do
                        {
                            Console.WriteLine("Выберете сумму списания денег:");

                            try
                            {
                                _take = Convert.ToDecimal(Console.ReadLine());
                                _isTake = false;

                            }
                            catch (Exception)
                            {

                                Console.WriteLine("Некорректная сумма списания!");

                            }

                        } while (_isTake);


                        account4.MoneyTransfer(listAccount[_fromTheAccount - 1], _take);
                        break;

                    default:
                        break;
                }
            } while (exit != "q");





        }
    }
}
